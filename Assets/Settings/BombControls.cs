//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/BombControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BombControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BombControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BombControls"",
    ""maps"": [
        {
            ""name"": ""BombController"",
            ""id"": ""69456260-27a4-4c14-978b-cc725af05ad7"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8900715c-1683-4b0a-9c5c-575310f0307f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a51b9d19-8609-4af2-aee1-034106a78485"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadUp"",
                    ""type"": ""Button"",
                    ""id"": ""0d344705-cd0f-47f0-8ffc-49fea0a38d4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadDown"",
                    ""type"": ""Button"",
                    ""id"": ""9f454cc1-3d19-4fc1-b57e-029ae3241ab9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadLeft"",
                    ""type"": ""Button"",
                    ""id"": ""7008063a-3451-4e5e-bf4e-412575314bc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadRight"",
                    ""type"": ""Button"",
                    ""id"": ""10d264e6-2291-461b-88c0-e46029b63f86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4757c3d5-0f20-4a13-88ec-f456e8ef7039"",
                    ""path"": ""<DualSenseGamepadHID>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86bf305c-813d-4e8b-9085-b45aa8cc6a99"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""DPadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5bd1674-1c9c-480a-9af9-882125701b1c"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""DPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6aebee8a-2c6b-4f48-9810-daa5cbaa8ff3"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""DPadLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""288a1688-8988-4fde-830e-6c1aac6187a8"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""DPadRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7133f207-c0f2-46f3-b881-fea9c97aee1e"",
                    ""path"": ""<DualSenseGamepadHID>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TriggerGame"",
            ""id"": ""95a284f5-4c00-4b09-8b0a-06ebfbcf0497"",
            ""actions"": [
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""167f6a92-40b9-4e97-a1a7-d5e99db182a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""d663d9a3-a705-48b0-a95d-5e1cafa3fc71"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a721311-c55d-4aac-8dc4-193e6a354114"",
                    ""path"": ""<DualSenseGamepadHID>/leftTriggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8feda599-22f5-47ab-99db-6109e5cfe269"",
                    ""path"": ""<DualSenseGamepadHID>/rightTriggerButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CommonControlls"",
            ""id"": ""0945a612-1e76-4ce3-97c8-1ae79eb26c12"",
            ""actions"": [
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""f0a29475-edde-4a61-9f69-2de080f790e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0c5dad38-3089-4c1d-99f4-5932a2b839ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5eb6a6e7-6316-4d79-a938-8128dca75ec8"",
                    ""path"": ""<DualSenseGamepadHID>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86b3e201-34a6-4b56-a96d-f4c19df0b9c5"",
                    ""path"": ""<DualSenseGamepadHID>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FinalCut"",
            ""id"": ""8ad9962c-148c-49a6-aa45-8d5d3de47f37"",
            ""actions"": [
                {
                    ""name"": ""ChooseWire"",
                    ""type"": ""Button"",
                    ""id"": ""7ec4c0b7-ef18-4f28-b77d-623265bbc79f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c9ba2860-6d6f-4614-b8b8-429dcbccafce"",
                    ""path"": ""<DualSenseGamepadHID>/touchpadButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""ChooseWire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GyroGame"",
            ""id"": ""a177b4a7-6e62-4895-8714-c704d96fa503"",
            ""actions"": [
                {
                    ""name"": ""GyroX"",
                    ""type"": ""Value"",
                    ""id"": ""21f38007-39f4-4d27-b6ec-3c60bacaaee5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GyroY"",
                    ""type"": ""Value"",
                    ""id"": ""75ce3378-6e57-478a-97ab-af45977e8899"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GyroZ"",
                    ""type"": ""Value"",
                    ""id"": ""e325aee2-5e06-4972-a34b-1c548bceedc3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accel"",
                    ""type"": ""Value"",
                    ""id"": ""54964d41-6861-43b1-afbb-79bd1a7b45cc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""70ed8e2d-a8d5-4702-b325-3edb67cb382f"",
                    ""path"": ""<DualSenseGamepadHID>/gyro/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GyroX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dbe14a3-56e3-4ec6-8b1c-941b9d9b7546"",
                    ""path"": ""<DualSenseGamepadHID>/accel"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""Accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0a472f-9196-403b-8171-c4b2a124809b"",
                    ""path"": ""<DualSenseGamepadHID>/gyro/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GyroY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7b82f6d-1583-4e19-93ee-effced7ba2e5"",
                    ""path"": ""<DualSenseGamepadHID>/gyro/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GyroZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VentGame"",
            ""id"": ""8aa7c40a-7240-45c4-b647-1e8a12417f7a"",
            ""actions"": [
                {
                    ""name"": ""SelectYes"",
                    ""type"": ""Button"",
                    ""id"": ""077cb535-0347-4ea6-82e8-9c1d58340728"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNo"",
                    ""type"": ""Button"",
                    ""id"": ""3e1b22d9-c9d8-4b6a-be4d-384f42b9d9b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""758fde49-34e8-450d-b7e5-e6c757fa74bd"",
                    ""path"": ""<DualSenseGamepadHID>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""SelectYes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50515f5a-bdde-449e-807e-dc3231bdc75d"",
                    ""path"": ""<DualSenseGamepadHID>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""SelectNo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WiresGame"",
            ""id"": ""794ab506-b969-446e-93e7-c9329244f48a"",
            ""actions"": [
                {
                    ""name"": ""DPadUp"",
                    ""type"": ""Button"",
                    ""id"": ""3f0f23b4-7c93-4391-aa0e-3757414693bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DPadDown"",
                    ""type"": ""Button"",
                    ""id"": ""30f09b64-e45b-422a-9a34-bd87f23deaac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ed07f30-445f-4c0b-8c02-fdfe0d51bcca"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""DPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80376071-c9c8-4a7f-974f-910b2bcbe0ee"",
                    ""path"": ""<DualSenseGamepadHID>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PS5 Controller"",
                    ""action"": ""DPadUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PS5 Controller"",
            ""bindingGroup"": ""PS5 Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<DualSenseGamepadHID>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // BombController
        m_BombController = asset.FindActionMap("BombController", throwIfNotFound: true);
        m_BombController_Rotation = m_BombController.FindAction("Rotation", throwIfNotFound: true);
        m_BombController_Select = m_BombController.FindAction("Select", throwIfNotFound: true);
        m_BombController_DPadUp = m_BombController.FindAction("DPadUp", throwIfNotFound: true);
        m_BombController_DPadDown = m_BombController.FindAction("DPadDown", throwIfNotFound: true);
        m_BombController_DPadLeft = m_BombController.FindAction("DPadLeft", throwIfNotFound: true);
        m_BombController_DPadRight = m_BombController.FindAction("DPadRight", throwIfNotFound: true);
        // TriggerGame
        m_TriggerGame = asset.FindActionMap("TriggerGame", throwIfNotFound: true);
        m_TriggerGame_LeftTrigger = m_TriggerGame.FindAction("LeftTrigger", throwIfNotFound: true);
        m_TriggerGame_RightTrigger = m_TriggerGame.FindAction("RightTrigger", throwIfNotFound: true);
        // CommonControlls
        m_CommonControlls = asset.FindActionMap("CommonControlls", throwIfNotFound: true);
        m_CommonControlls_Return = m_CommonControlls.FindAction("Return", throwIfNotFound: true);
        m_CommonControlls_Pause = m_CommonControlls.FindAction("Pause", throwIfNotFound: true);
        // FinalCut
        m_FinalCut = asset.FindActionMap("FinalCut", throwIfNotFound: true);
        m_FinalCut_ChooseWire = m_FinalCut.FindAction("ChooseWire", throwIfNotFound: true);
        // GyroGame
        m_GyroGame = asset.FindActionMap("GyroGame", throwIfNotFound: true);
        m_GyroGame_GyroX = m_GyroGame.FindAction("GyroX", throwIfNotFound: true);
        m_GyroGame_GyroY = m_GyroGame.FindAction("GyroY", throwIfNotFound: true);
        m_GyroGame_GyroZ = m_GyroGame.FindAction("GyroZ", throwIfNotFound: true);
        m_GyroGame_Accel = m_GyroGame.FindAction("Accel", throwIfNotFound: true);
        // VentGame
        m_VentGame = asset.FindActionMap("VentGame", throwIfNotFound: true);
        m_VentGame_SelectYes = m_VentGame.FindAction("SelectYes", throwIfNotFound: true);
        m_VentGame_SelectNo = m_VentGame.FindAction("SelectNo", throwIfNotFound: true);
        // WiresGame
        m_WiresGame = asset.FindActionMap("WiresGame", throwIfNotFound: true);
        m_WiresGame_DPadUp = m_WiresGame.FindAction("DPadUp", throwIfNotFound: true);
        m_WiresGame_DPadDown = m_WiresGame.FindAction("DPadDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BombController
    private readonly InputActionMap m_BombController;
    private List<IBombControllerActions> m_BombControllerActionsCallbackInterfaces = new List<IBombControllerActions>();
    private readonly InputAction m_BombController_Rotation;
    private readonly InputAction m_BombController_Select;
    private readonly InputAction m_BombController_DPadUp;
    private readonly InputAction m_BombController_DPadDown;
    private readonly InputAction m_BombController_DPadLeft;
    private readonly InputAction m_BombController_DPadRight;
    public struct BombControllerActions
    {
        private @BombControls m_Wrapper;
        public BombControllerActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_BombController_Rotation;
        public InputAction @Select => m_Wrapper.m_BombController_Select;
        public InputAction @DPadUp => m_Wrapper.m_BombController_DPadUp;
        public InputAction @DPadDown => m_Wrapper.m_BombController_DPadDown;
        public InputAction @DPadLeft => m_Wrapper.m_BombController_DPadLeft;
        public InputAction @DPadRight => m_Wrapper.m_BombController_DPadRight;
        public InputActionMap Get() { return m_Wrapper.m_BombController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BombControllerActions set) { return set.Get(); }
        public void AddCallbacks(IBombControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_BombControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BombControllerActionsCallbackInterfaces.Add(instance);
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @DPadUp.started += instance.OnDPadUp;
            @DPadUp.performed += instance.OnDPadUp;
            @DPadUp.canceled += instance.OnDPadUp;
            @DPadDown.started += instance.OnDPadDown;
            @DPadDown.performed += instance.OnDPadDown;
            @DPadDown.canceled += instance.OnDPadDown;
            @DPadLeft.started += instance.OnDPadLeft;
            @DPadLeft.performed += instance.OnDPadLeft;
            @DPadLeft.canceled += instance.OnDPadLeft;
            @DPadRight.started += instance.OnDPadRight;
            @DPadRight.performed += instance.OnDPadRight;
            @DPadRight.canceled += instance.OnDPadRight;
        }

        private void UnregisterCallbacks(IBombControllerActions instance)
        {
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @DPadUp.started -= instance.OnDPadUp;
            @DPadUp.performed -= instance.OnDPadUp;
            @DPadUp.canceled -= instance.OnDPadUp;
            @DPadDown.started -= instance.OnDPadDown;
            @DPadDown.performed -= instance.OnDPadDown;
            @DPadDown.canceled -= instance.OnDPadDown;
            @DPadLeft.started -= instance.OnDPadLeft;
            @DPadLeft.performed -= instance.OnDPadLeft;
            @DPadLeft.canceled -= instance.OnDPadLeft;
            @DPadRight.started -= instance.OnDPadRight;
            @DPadRight.performed -= instance.OnDPadRight;
            @DPadRight.canceled -= instance.OnDPadRight;
        }

        public void RemoveCallbacks(IBombControllerActions instance)
        {
            if (m_Wrapper.m_BombControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBombControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_BombControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BombControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BombControllerActions @BombController => new BombControllerActions(this);

    // TriggerGame
    private readonly InputActionMap m_TriggerGame;
    private List<ITriggerGameActions> m_TriggerGameActionsCallbackInterfaces = new List<ITriggerGameActions>();
    private readonly InputAction m_TriggerGame_LeftTrigger;
    private readonly InputAction m_TriggerGame_RightTrigger;
    public struct TriggerGameActions
    {
        private @BombControls m_Wrapper;
        public TriggerGameActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftTrigger => m_Wrapper.m_TriggerGame_LeftTrigger;
        public InputAction @RightTrigger => m_Wrapper.m_TriggerGame_RightTrigger;
        public InputActionMap Get() { return m_Wrapper.m_TriggerGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TriggerGameActions set) { return set.Get(); }
        public void AddCallbacks(ITriggerGameActions instance)
        {
            if (instance == null || m_Wrapper.m_TriggerGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TriggerGameActionsCallbackInterfaces.Add(instance);
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
        }

        private void UnregisterCallbacks(ITriggerGameActions instance)
        {
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
        }

        public void RemoveCallbacks(ITriggerGameActions instance)
        {
            if (m_Wrapper.m_TriggerGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITriggerGameActions instance)
        {
            foreach (var item in m_Wrapper.m_TriggerGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TriggerGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TriggerGameActions @TriggerGame => new TriggerGameActions(this);

    // CommonControlls
    private readonly InputActionMap m_CommonControlls;
    private List<ICommonControllsActions> m_CommonControllsActionsCallbackInterfaces = new List<ICommonControllsActions>();
    private readonly InputAction m_CommonControlls_Return;
    private readonly InputAction m_CommonControlls_Pause;
    public struct CommonControllsActions
    {
        private @BombControls m_Wrapper;
        public CommonControllsActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Return => m_Wrapper.m_CommonControlls_Return;
        public InputAction @Pause => m_Wrapper.m_CommonControlls_Pause;
        public InputActionMap Get() { return m_Wrapper.m_CommonControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CommonControllsActions set) { return set.Get(); }
        public void AddCallbacks(ICommonControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_CommonControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CommonControllsActionsCallbackInterfaces.Add(instance);
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(ICommonControllsActions instance)
        {
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(ICommonControllsActions instance)
        {
            if (m_Wrapper.m_CommonControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICommonControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_CommonControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CommonControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CommonControllsActions @CommonControlls => new CommonControllsActions(this);

    // FinalCut
    private readonly InputActionMap m_FinalCut;
    private List<IFinalCutActions> m_FinalCutActionsCallbackInterfaces = new List<IFinalCutActions>();
    private readonly InputAction m_FinalCut_ChooseWire;
    public struct FinalCutActions
    {
        private @BombControls m_Wrapper;
        public FinalCutActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChooseWire => m_Wrapper.m_FinalCut_ChooseWire;
        public InputActionMap Get() { return m_Wrapper.m_FinalCut; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FinalCutActions set) { return set.Get(); }
        public void AddCallbacks(IFinalCutActions instance)
        {
            if (instance == null || m_Wrapper.m_FinalCutActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FinalCutActionsCallbackInterfaces.Add(instance);
            @ChooseWire.started += instance.OnChooseWire;
            @ChooseWire.performed += instance.OnChooseWire;
            @ChooseWire.canceled += instance.OnChooseWire;
        }

        private void UnregisterCallbacks(IFinalCutActions instance)
        {
            @ChooseWire.started -= instance.OnChooseWire;
            @ChooseWire.performed -= instance.OnChooseWire;
            @ChooseWire.canceled -= instance.OnChooseWire;
        }

        public void RemoveCallbacks(IFinalCutActions instance)
        {
            if (m_Wrapper.m_FinalCutActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFinalCutActions instance)
        {
            foreach (var item in m_Wrapper.m_FinalCutActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FinalCutActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FinalCutActions @FinalCut => new FinalCutActions(this);

    // GyroGame
    private readonly InputActionMap m_GyroGame;
    private List<IGyroGameActions> m_GyroGameActionsCallbackInterfaces = new List<IGyroGameActions>();
    private readonly InputAction m_GyroGame_GyroX;
    private readonly InputAction m_GyroGame_GyroY;
    private readonly InputAction m_GyroGame_GyroZ;
    private readonly InputAction m_GyroGame_Accel;
    public struct GyroGameActions
    {
        private @BombControls m_Wrapper;
        public GyroGameActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GyroX => m_Wrapper.m_GyroGame_GyroX;
        public InputAction @GyroY => m_Wrapper.m_GyroGame_GyroY;
        public InputAction @GyroZ => m_Wrapper.m_GyroGame_GyroZ;
        public InputAction @Accel => m_Wrapper.m_GyroGame_Accel;
        public InputActionMap Get() { return m_Wrapper.m_GyroGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GyroGameActions set) { return set.Get(); }
        public void AddCallbacks(IGyroGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GyroGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GyroGameActionsCallbackInterfaces.Add(instance);
            @GyroX.started += instance.OnGyroX;
            @GyroX.performed += instance.OnGyroX;
            @GyroX.canceled += instance.OnGyroX;
            @GyroY.started += instance.OnGyroY;
            @GyroY.performed += instance.OnGyroY;
            @GyroY.canceled += instance.OnGyroY;
            @GyroZ.started += instance.OnGyroZ;
            @GyroZ.performed += instance.OnGyroZ;
            @GyroZ.canceled += instance.OnGyroZ;
            @Accel.started += instance.OnAccel;
            @Accel.performed += instance.OnAccel;
            @Accel.canceled += instance.OnAccel;
        }

        private void UnregisterCallbacks(IGyroGameActions instance)
        {
            @GyroX.started -= instance.OnGyroX;
            @GyroX.performed -= instance.OnGyroX;
            @GyroX.canceled -= instance.OnGyroX;
            @GyroY.started -= instance.OnGyroY;
            @GyroY.performed -= instance.OnGyroY;
            @GyroY.canceled -= instance.OnGyroY;
            @GyroZ.started -= instance.OnGyroZ;
            @GyroZ.performed -= instance.OnGyroZ;
            @GyroZ.canceled -= instance.OnGyroZ;
            @Accel.started -= instance.OnAccel;
            @Accel.performed -= instance.OnAccel;
            @Accel.canceled -= instance.OnAccel;
        }

        public void RemoveCallbacks(IGyroGameActions instance)
        {
            if (m_Wrapper.m_GyroGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGyroGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GyroGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GyroGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GyroGameActions @GyroGame => new GyroGameActions(this);

    // VentGame
    private readonly InputActionMap m_VentGame;
    private List<IVentGameActions> m_VentGameActionsCallbackInterfaces = new List<IVentGameActions>();
    private readonly InputAction m_VentGame_SelectYes;
    private readonly InputAction m_VentGame_SelectNo;
    public struct VentGameActions
    {
        private @BombControls m_Wrapper;
        public VentGameActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectYes => m_Wrapper.m_VentGame_SelectYes;
        public InputAction @SelectNo => m_Wrapper.m_VentGame_SelectNo;
        public InputActionMap Get() { return m_Wrapper.m_VentGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VentGameActions set) { return set.Get(); }
        public void AddCallbacks(IVentGameActions instance)
        {
            if (instance == null || m_Wrapper.m_VentGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VentGameActionsCallbackInterfaces.Add(instance);
            @SelectYes.started += instance.OnSelectYes;
            @SelectYes.performed += instance.OnSelectYes;
            @SelectYes.canceled += instance.OnSelectYes;
            @SelectNo.started += instance.OnSelectNo;
            @SelectNo.performed += instance.OnSelectNo;
            @SelectNo.canceled += instance.OnSelectNo;
        }

        private void UnregisterCallbacks(IVentGameActions instance)
        {
            @SelectYes.started -= instance.OnSelectYes;
            @SelectYes.performed -= instance.OnSelectYes;
            @SelectYes.canceled -= instance.OnSelectYes;
            @SelectNo.started -= instance.OnSelectNo;
            @SelectNo.performed -= instance.OnSelectNo;
            @SelectNo.canceled -= instance.OnSelectNo;
        }

        public void RemoveCallbacks(IVentGameActions instance)
        {
            if (m_Wrapper.m_VentGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVentGameActions instance)
        {
            foreach (var item in m_Wrapper.m_VentGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VentGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VentGameActions @VentGame => new VentGameActions(this);

    // WiresGame
    private readonly InputActionMap m_WiresGame;
    private List<IWiresGameActions> m_WiresGameActionsCallbackInterfaces = new List<IWiresGameActions>();
    private readonly InputAction m_WiresGame_DPadUp;
    private readonly InputAction m_WiresGame_DPadDown;
    public struct WiresGameActions
    {
        private @BombControls m_Wrapper;
        public WiresGameActions(@BombControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DPadUp => m_Wrapper.m_WiresGame_DPadUp;
        public InputAction @DPadDown => m_Wrapper.m_WiresGame_DPadDown;
        public InputActionMap Get() { return m_Wrapper.m_WiresGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WiresGameActions set) { return set.Get(); }
        public void AddCallbacks(IWiresGameActions instance)
        {
            if (instance == null || m_Wrapper.m_WiresGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WiresGameActionsCallbackInterfaces.Add(instance);
            @DPadUp.started += instance.OnDPadUp;
            @DPadUp.performed += instance.OnDPadUp;
            @DPadUp.canceled += instance.OnDPadUp;
            @DPadDown.started += instance.OnDPadDown;
            @DPadDown.performed += instance.OnDPadDown;
            @DPadDown.canceled += instance.OnDPadDown;
        }

        private void UnregisterCallbacks(IWiresGameActions instance)
        {
            @DPadUp.started -= instance.OnDPadUp;
            @DPadUp.performed -= instance.OnDPadUp;
            @DPadUp.canceled -= instance.OnDPadUp;
            @DPadDown.started -= instance.OnDPadDown;
            @DPadDown.performed -= instance.OnDPadDown;
            @DPadDown.canceled -= instance.OnDPadDown;
        }

        public void RemoveCallbacks(IWiresGameActions instance)
        {
            if (m_Wrapper.m_WiresGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWiresGameActions instance)
        {
            foreach (var item in m_Wrapper.m_WiresGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WiresGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WiresGameActions @WiresGame => new WiresGameActions(this);
    private int m_PS5ControllerSchemeIndex = -1;
    public InputControlScheme PS5ControllerScheme
    {
        get
        {
            if (m_PS5ControllerSchemeIndex == -1) m_PS5ControllerSchemeIndex = asset.FindControlSchemeIndex("PS5 Controller");
            return asset.controlSchemes[m_PS5ControllerSchemeIndex];
        }
    }
    public interface IBombControllerActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnDPadUp(InputAction.CallbackContext context);
        void OnDPadDown(InputAction.CallbackContext context);
        void OnDPadLeft(InputAction.CallbackContext context);
        void OnDPadRight(InputAction.CallbackContext context);
    }
    public interface ITriggerGameActions
    {
        void OnLeftTrigger(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
    }
    public interface ICommonControllsActions
    {
        void OnReturn(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IFinalCutActions
    {
        void OnChooseWire(InputAction.CallbackContext context);
    }
    public interface IGyroGameActions
    {
        void OnGyroX(InputAction.CallbackContext context);
        void OnGyroY(InputAction.CallbackContext context);
        void OnGyroZ(InputAction.CallbackContext context);
        void OnAccel(InputAction.CallbackContext context);
    }
    public interface IVentGameActions
    {
        void OnSelectYes(InputAction.CallbackContext context);
        void OnSelectNo(InputAction.CallbackContext context);
    }
    public interface IWiresGameActions
    {
        void OnDPadUp(InputAction.CallbackContext context);
        void OnDPadDown(InputAction.CallbackContext context);
    }
}
